قبل استخدام Node وحتى الآن فإننا كلما أردنا كتابة أمر برمجي وتنفيذه بلغة JavaScript كان علينا القيام بذلك في Console الموجود في Chrome Developer Tools. لكن الآن وبعد توفر Node فإننا في حال أردنا كتابة بعض الأوامر البرمجية بلغة JavaScript وتنفيذها على جهازنا مباشرة بدلًا من Console المتصفح، يمكننا القيام بذلك بمساعدة Node REPL وذلك عن طريق الانتقال إلى وضع Node REPL وإنشاء جلسة session جديدة من Terminal وكتابة أي أمر برمجي نريد تنفيذه.


الدخول إلى وضع Node's REPL
يأتي Node مع بيئة افتراضية تسمى REPL وهي اختصار للكلمات Read-Eval-Print-Loop وهي طريقة سريعة وسهلة لاختبار أوامر JavaScript ولتشغيل REPL قم بفتح command prompt في Windows أو terminal في Mac أو UNIX / Linux واكتب node كما هو موضح أدناه:

 node
في حال كتابة الأمر التالي بشكل صحيح، فإن المخرجات ستكون على النحو التالي:

 Welcome to Node.js v13.10.1.
 Type ".help" for more information.
تدل هذهِ المخرجات على أننا بالفعل انتقلنا إلى REPL وبدأنا الجلسة، ويمكننا الآن اختبار أي تعبير JavaScript في REPL على سبيل المثال يمكننا طباعة العبارة التالية: !Hello from Node REPL :

 console.log("Hello from Node REPL!");
المخرجات:
 Hello from Node REPL!
 undefined
ملاحظة: لإغلاق تطبيق Node.js قم بالنقر على ctrl+C. الآن دعنا نقوم بكتابة أمر برمجي آخر وطباعة نتيجته كما هو موضح أدناه:

 3 + 3
بعد الضغط على الزر Enter ستظهر لنا نتيجة الأمر البرمجي الذي قمنا بكتابته مباشرة:

 6
لاحظ أن خطوة طباعة النتيجة حدثت تلقائيًا، أي أننا لم نحتاج إلى كتابة أمر الطباعة ()console.log لطباعة النتيجة، وذلك لأن node يقوم بطباعة كل سطر برمجي تقوم بكتابته تلقائياً.


كتابة عبارة برمجية Statement
في حال قمنا بكتابة سطر برمجي أو مايسمى Statement، سيقوم node بطباعة النتيجة undefined، وهذا ببساطة لأن العبارات البرمجية أو Statements لاتحتوي على قيم ليقدرها node ويعود لنا بمخرجاتها ولتوضيح الفكرة لاحظ المثال التالي:

 let age = 13;
في هذا المثال يعتبر الأمر البرمجي الموضح أعلاه عبارة برمجية أو Statement، حيث أننا لم نطلب من node أن يقوم بإعطائنا أي مخرجات بالتالي ستكون المخرجات:

 undefined
لم تتم طباعة قيمة المتغير المعرف أعلاه وذلك لأن الأمر الذي تمت كتابته يعتبر عبارة برمجية Statement وليس تعبير برمجي Expression ليتم تنفيذه وطباعة نتيجته.

كتابة تعبير برمجي Expression
عند كتابة أي تعبير برمجي ستتم طباعة نتيجته تلقائيًا بمجرد تنفيذه، لاحظ المثال التالي:

 3 == '3'
المخرجات:
 true 
تمت طباعة النتيجة لأن التعبير البرمجي أعلاه يحتوي على نتيجة بالفعل.

كتابة أمر برمجي متعدد الأسطر
عند كتابتك لتعبير برمجي يحتوي على أكثر من سطر، دالة على سبيل المثال، سيقوم node باكتشاف أن الأمر البرمجي الذي تتم كتابته يحتاج لأكثر من سطر، وذلك بعد كتابة القوس }، لذلك سيسمح لك بالكتابة لأكثر من سطر حتى تصل إلى القوس {. ولتوضيح الفكرة لاحظ المثال التالي:

 function today(){
 return new Date();
     }
    
undefined
لاحظ أن node سمح لك بكتابة أكثر من سطر وذلك لأنه قام باكتشاف قوس الدالة المفتوح } وسيوقف node الكتابة متعددة الأسطر بعد كتابتك للقوس {.


